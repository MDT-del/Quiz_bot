services:
  db:
    image: mysql:8.0
    container_name: quiz-db
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      # والیوم اول: برای ذخیره دائمی داده‌های دیتابیس پس از ساخته شدن
      - db_data:/var/lib/mysql
      # والیوم دوم: برای خواندن و اجرای فایل quiz.sql در هنگام ساخت اولیه
      - ./data/quiz.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - quiz_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # زمان بیشتری برای راه‌اندازی اولیه MySQL در نظر گرفته شده

  app:
    build: .
    container_name: quiz-app
    restart: always
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - quiz_network
    volumes:
      # مپ کردن کل پروژه برای توسعه آسان‌تر (تغییرات کد فوراً در کانتینر منعکس می‌شوند)
      # این خط را برای محیط پروداکشن می‌توانید کامنت کنید اگر نمی‌خواهید کد روی هاست مستقیماً در کانتینر باشد.
      - .:/app
      # مپ کردن پوشه آپلود مدیا به هاست برای پایداری فایل‌ها و دسترسی مشترک
      # مسیر هاست: ./static/media (نسبت به docker-compose.yml)
      # مسیر کانتینر: /app/static/media (جایی که Flask فایل‌ها را ذخیره و جستجو می‌کند)
      - ./static/media:/app/static/media
    # environment:
      # PYTHONUNBUFFERED: 1 # این معمولا در Dockerfile بهتر است تنظیم شود اگر نیاز باشد
      # GUNICORN_WORKERS: 1 # برای تست مشکل timeout، تعداد worker ها را در gunicorn.conf.py روی 1 تنظیم کردیم

volumes:
  db_data: # تعریف named volume برای پایداری داده‌های MySQL

networks:
  quiz_network:
    driver: bridge # استفاده از bridge network پیش‌فرض
